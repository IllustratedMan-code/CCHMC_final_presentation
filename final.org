#+OPTIONS: toc:nil num:nil author:nil timestamp:nil
#+REVEAL_ROOT: ./revealjs
#+title: Journey Through the Pipeline
#+REVEAL_THEME: serif
#+EXPORT_FILE_NAME: index.html

* Who am I?
+ COOP Student from UC
+ Computational Team
** What Have I been doing?
+ =trackgen=
+ =compileqc=
+ =atac_seq_mixtape=
+ Mixtape Engineers
* Mixtape Engineers
+ Gitlab repo that facilitates team organization
+ Set of standards for new projects
+ Engineering rigor
** Agile Board
[[file:agile_board.png]]
** Architecture
#+attr_html: :width 840px
[[file:mixtape_engineers.png]]
** Rationale (why not the wiki?)
+ Companion to the ASAP wiki page
+ Advanced version control
+ Used as an example project

* Trackgen
+ Generate UCSC trackhub config files
  [[file:trackgen.png]]
** Output
[[file:trackgen_output.png]]
** Usage
#+begin_src bash
trackgen --help # get some help
trackgen config # generates trackgen config, finds required files
trackgen hub # generates hub config
#+end_src
[[file:trackgenhelp.png]]
** Containers and Modules
+ Module is stable, container is unstable
#+begin_src bash
module load trackgen/0.0.1-dev
trackgen --help
# is equivalent to
module load singularity
singularity run $TEAM/lew2mz/containers/trackgen --help
#+end_src
** Features
+ Functional config language (modified JSON/YAML)
+ Regex/glob based detection of files
+ JSON/YAML to hub conversion
** Development strategy
+ Unit tests
+ Easily extendable
+ Automatic Documentation

[[file:trackgen_docs.png]]
** Project structure
#+begin_src
trackgen
├── classes.py
├── CLI.py
├── config.py
├── data
│   ├── associations.json
│   ├── common.json
│   ├── complete.json
│   ├── defaults.json
│   ├── example_config.json
│   ├── example_hub.txt
│   ├── __init__.py
│   ├── __pycache__
│   ├── README.org
│   ├── template_page.html
│   └── valid_file_extensions.json
├── data_interpreter.py
├── functions.py
├── __init__.py
├── __main__.py
└── __pycache__
#+end_src
** Architecture
| [[file:trackgen_high_level.png]] | [[file:trackgen_low_level.png]] |

* Compileqc
+ Generate QC sheet from pipeline
+ Budget Multiqc
** Usage
#+begin_src bash
module load singularity
singularity run $TEAM/lew2mz/containers/compileqc --help
#+end_src
[[file:compileqchelp.png]]
** Output
+ Configurable shortname
+ Different Sheets for each data type
[[file:spreadsheet.png]]
** Features
Aggregate the following output:
+ Homer
+ (TF/NONTF) RELI
+ ENCODE
** Development strategy
+ Test based development
+ Object oriented
+ Design before code
+ Automatic documentation
** Project Structure
#+begin_src
compileqc
├── cli.py
├── data.py
├── __init__.py
├── __main__.py
└── __pycache__
#+end_src
** Architecture
| [[file:compileqc_high_level.png]] | [[file:compileqc_low_level.png]] |
* Atac seq mixtape
+ Nextflow pipeline to automate analysis
** Contribution
+ Make UI
+ compilqc integration
* Compileqc integration
+ New and improved QC sheet
** Implementation details
+ Added an easy way to add new flags
+ New mapping json input allows for shortname configuration in QC sheet
+ No module dependencies, uses singularity containers
* Make UI
+ Intuitive interface
+ Automatic help generation
+ Error detection

  [[file:make_interface.gif]]
** Usage
#+begin_leftcol
#+begin_src bash
make # or make help
make config # will guide you through initial data entry
make config # run it after data entry
make run # run the pipeline (will fail)
#+end_src
#+end_leftcol
#+begin_rightcol
#+attr_html: :width 70%
[[file:make_help.png]]
#+end_rightcol
** Advantages over the old method
+ Users don't have to learn a new configuration framework
+ Options have sane defaults
+ More intuitive
+ Automatic documentation
